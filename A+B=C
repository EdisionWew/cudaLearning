#include <cuda_runtime.h>
#include <stdio.h>
#define CHECK(call) \
{ \
　　const cudaError_t error = call; \
　　if (error != cudaSuccess) \
　　{ \
　　　　printf("Error: %s:%d, ", __FILE__, __LINE__); \
　　　　printf("code:%d, reason: %s\n", error, cudaGetErrorString(error)); \
　　　　exit(1); \
　　} \
}

void checkResult(float *hostRef, float *gpuRef, const int N)
{
    float epsilon=0.000001;
    int match=1;
    for(int i=0;i<N;i++)
    {
        if(abs(hostRef[i]-gpuRef[i]>epsilon))
        {
            match=0;
            printf("Arrays do not match!\n");
            break;
        }
    }
    if(match)
        printf("Arrays match.\n\n");
}

void initialData(float *ip, int size)
{
    time_t t;
    srand((unsigned)time(&t));
    for(int i=0;i<size;i++)
    {
        ip[i]=drand48();
    }
}

void DataShow(float *ip, int size)
{
    for(int i=0;i<size;i++)
    {
        printf("%f ",ip[i]);
    }
    printf("\n");
}
void sumArraysOnHost(float *A, float *B, float *C, const int N)
{
    for(int idx=0;idx<N;idx++)
    {
        C[idx]=A[idx]+B[idx];
    }
}

__global__ void sumArraysOnGPU(float *A, float *B, float *C)
{
    int i=threadIdx.x;
    C[i]=A[i]+B[i];
}

__global__ void reluOnGPU(float *A, float *B, float *C)
{
    int i=threadIdx.x;
    if(A[i]>B[i])
        C[i]=A[i];
    else
        C[i]=B[i];
}


int main(int argc, char **argv)
{
    printf("%s Starting...\n",argv[0]);
    
    int dev=0;
    cudaSetDevice(dev);
    int nElem=10;
    size_t nBytes=nElem*sizeof(float);
    
    float *h_A, *h_B,*hostRef,*gpuRef;
    
    h_A=(float*)malloc(nBytes);
    h_B=(float*)malloc(nBytes);
    hostRef=(float*)malloc(nBytes);
    gpuRef=(float*)malloc(nBytes);
    
    initialData(h_A,nElem);
    initialData(h_B,nElem);
    memset(hostRef,0,nBytes);
    memset(gpuRef,0,nBytes);
    
    printf("Show A Arrays:\n");
    DataShow(h_A,nElem);
    printf("Show B Arrays:\n");
    DataShow(h_B,nElem);
    
    
    float *d_A,*d_B,*d_C;
    cudaMalloc((float**)&d_A,nBytes);
    cudaMalloc((float**)&d_B,nBytes);
    cudaMalloc((float**)&d_C,nBytes);
    
    cudaMemcpy(d_A,h_A,nBytes,cudaMemcpyHostToDevice);
    cudaMemcpy(d_B,h_B,nBytes,cudaMemcpyHostToDevice);
    
    dim3 block (nElem);
    printf("block.x=%d\n",block.x);
    dim3 grid (nElem/block.x);
    reluOnGPU<<<grid,block>>>(d_A,d_B,d_C);
    cudaMemcpy(gpuRef,d_C,nBytes,cudaMemcpyDeviceToHost);
    //sumArraysOnHost(h_A,h_B,hostRef,nElem);
    
    printf("Show C Arrays:\n");
    DataShow(gpuRef,nElem);
    
    //checkResult(hostRef,gpuRef,nElem);
    cudaFree(d_A);
    cudaFree(d_B);
    cudaFree(d_C);
    
    free(h_A);
    free(h_B);
    free(hostRef);
    free(gpuRef);
    return 0;
}
